stages:
  - build
  - test

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CARGO_HOME: "$CI_PROJECT_DIR/.cache/cargo"

cache:
  key: lnrod-global
  paths:
    - .cache/pip
    - bin/bitcoind

before_script:
  - ls -al
  - mkdir -p bin

# Do this in a separate job, so that it gets cached with high probability
# later jobs can be flaky and cache is not written when a job fails.
get_bitcoin:
  stage: build
  image: python:3.8
  script:
    - ls -l bin
    - if [ ! -e bin/bitcoind ]; then
      wget --no-verbose https://bitcoin.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      echo da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032  bitcoin-0.21.0-x86_64-linux-gnu.tar.gz | sha256sum -c &&
      tar xzf bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      mv bitcoin-0.21.0/bin/bitcoind bin/ &&
      rm -rf bitcoin-0.21.0 ;
      fi
  artifacts:
    paths:
      - bin/bitcoind

# Compile lnrod
compile:
  stage: build
  cache:
    key: lnrod-compile
    paths:
      - .cache/cargo
  image: rust:1.60.0
  timeout: 30m
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - cargo build
    - cargo test
    - ls -l target/debug
# use these if you want to quickly iterate over the integration test (disable the build steps above and see integration job)
#    - cp target/debug/lnrod .cache/
#    - cp target/debug/lnrcli .cache/
  artifacts:
    paths:
      - target/debug/lnrod
      - target/debug/lnrcli

# Compile vlsd2
compile-vls:
  stage: build
  cache:
    key: lnrod-vls
    paths:
      - .cache/cargo
  image: rust:1.60.0
  timeout: 30m
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - vls_rev=`./scripts/vls-revision`
    - echo "$vls_rev"
    - git clone https://gitlab.com/lightning-signer/validating-lightning-signer.git
    - cd validating-lightning-signer
    - git checkout "$vls_rev"
    - cargo build --locked --bin vlsd2
    - ls -l target/debug
    - mkdir -p ../bin
    - cp target/debug/vlsd2 ../bin/
  artifacts:
    paths:
      - bin/vlsd2

# Disable coverage for now, because it doesn't work in docker based gitlab runners without
# disabling important kernel security features

#coverage:
#  stage: test
#  cache:
#    key: lnrod-compile
#    paths:
#      - .cache/cargo
#  image: rust:1.58.1
#  timeout: 20m
#  before_script:
#    - rustup component add rustfmt
#    - apt-get update
#    - apt-get install -y cmake g++ pkg-config jq libcurl4-openssl-dev libelf-dev libdw-dev binutils-dev libiberty-dev
#    - cargo install cargo-kcov
#    - ls -l $CARGO_HOME/bin
#    - if [ ! -x $CARGO_HOME/bin/kcov ]; then cargo kcov --print-install-kcov-sh | sh ; fi
#    - $CARGO_HOME/bin/kcov --version
#  script:
#    - CARGO_TARGET_DIR=target/kcov cargo kcov --verbose --lib -- --verify --exclude-pattern=/home/user/.cargo,/usr/include,/usr/src/debug
#  after_script:
#    - bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"

integration1:
  stage: test
  image: python:3.8
  timeout: 10m
  script:
# use this if you want to quickly iterate over the integration test (see compile job)
#    - mkdir -p target/debug && cp .cache/lnrod .cache/lnrcli target/debug/
    - ls -l bin
    - ls -l target/debug
    - pip3 install -r requirements.txt
    - ./scripts/compile-proto
    - export PATH="$PATH:`pwd`/bin"
    - export VLS_CHAINFOLLOWER_ENABLE=1
    - SIGNER=vls-local ./tests/integration-test.py
    - sleep 5 # wait for bitcoind to stop
    - SIGNER=vls2-null  ./tests/integration-test.py
  artifacts:
    when: always
    paths:
      - test-output

integration2:
  stage: test
  image: python:3.8
  timeout: 10m
  script:
    # use this if you want to quickly iterate over the integration test (see compile job)
    #    - mkdir -p target/debug && cp .cache/lnrod .cache/lnrcli target/debug/
    - ls -l bin
    - ls -l target/debug
    - pip3 install -r requirements.txt
    - ./scripts/compile-proto
    - export PATH="$PATH:`pwd`/bin"
    - export VLS_CHAINFOLLOWER_ENABLE=1
    - SIGNER=vls2-grpc  ./tests/integration-test.py --test-disaster bitcoind
    - sleep 5 # wait for bitcoind to stop
    - SIGNER=vls2-grpc  ./tests/integration-test.py
  artifacts:
    when: always
    paths:
      - test-output
